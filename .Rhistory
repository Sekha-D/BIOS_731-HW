library(tidyverse)
library(tictoc)
library(doParallel)
library(foreach)
source(here::here("source", "Functions.R"))
source(here::here("Simulations","run_scenario.R"))
B=10
nt=10
alpha=0.05
nsim=0.95*(1 - 0.95)/(0.01)^2
n = c(10, 50, 500)
beta_true = c(0, 0.5, 2)
sigma2_true = c(2, log(2))
param_grid = expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
sigma2_true = sigma2_true)
no_scenario=nrow(param_grid)
num_cores = detectCores() -2
cl = makeCluster(num_cores)
registerDoParallel(cl)
detectCores()
cl = makeCluster(num_cores)
registerDoParallel(cl)
summary_table = foreach(i =1:no_scenario, .combine = rbind) %dopar% {
params = param_grid[i,]
run_scenario(params,nsim=nsim,B=B,nt=nt,alpha=alpha)
}
library(tictoc)
summary_table = foreach(i =1:no_scenario, .combine = rbind) %dopar% {
params = param_grid[i,]
run_scenario(params,nsim=nsim,B=B,nt=nt,alpha=alpha)
}
tic()
summary_table = foreach(i =1:no_scenario, .combine = rbind) %dopar% {
params = param_grid[i,]
run_scenario(params,nsim=nsim,B=B,nt=nt,alpha=alpha)
}
tic()
summary_table = foreach(i =1:no_scenario, .combine = rbind) %dopar% {
params = param_grid[i,]
run_scenario(params,nsim=nsim,B=B,nt=nt,alpha=alpha)
}
tictoc::tic()
source(here::here("Simulations","run_scenario.R"))
summary_table = foreach(i =1:no_scenario, .combine = rbind) %dopar% {
params = param_grid[i,]
run_scenario(params,nsim=nsim,B=B,nt=nt,alpha=alpha)
}
source(here::here("Simulations","run_scenario.R"))
run_scenario<- function (params,nsim,B,nt,alpha=0.05){
results = matrix(NA,ncol=14,nrow=nsim)
set.seed(3333)
for(i in 1:nsim){
####################
# simulate data
simdata = get_simdata(n = params$n,
beta_treat = params$beta_true,
sigma2 = params$sigma2_true)
####################
# apply method(s)
fit = fit_model(simdata)
####################
# calculate estimates
tictoc::tic()
estimates = get_estimates(model_fit = fit,
true_beta = params$beta_true)
estimates = c(estimates,true_beta = params$beta_true, n = params$n,sigma2_true = params$sigma2_true)
time_stamp1 = tictoc::toc(quiet =TRUE)
wald_time=time_stamp1$toc - time_stamp1$tic
coef=estimates[1]
tictoc::tic()
boot_perc<-boot_nonpara_perc_residuals(sample=simdata,beta_est=coef,B=B,alpha=alpha)
time_stamp2 = tictoc::toc(quiet =TRUE)
boot_perc_time=time_stamp2$toc - time_stamp2$tic
estimates<- c(estimates,boot_perc)
tictoc::tic()
boot_t<-boot_nonpara_t_residuals(sample=simdata,beta_est=coef,B=B,nt=nt,alpha=alpha)
time_stamp3 = tictoc::toc(quiet =TRUE)
boot_t_time=time_stamp3$toc - time_stamp3$tic
estimates<- c(estimates,boot_t,wald_time,boot_perc_time,boot_t_time)
results[i,] = estimates
}
####################
beta_est<-mean(results[,1])
bias<- params$beta_true-beta_est
wald_coverage<-mean((params$beta_true >= results[,3] & params$beta_true <= results[,4]))
boot_perc_coverage<-mean((params$beta_true >= results[,8] & params$beta_true <= results[,9]))
boot_t_coverage<-mean((params$beta_true >= results[,10] & params$beta_true <= results[,11]))
mean_wald_time<-mean(results[,12])
mean_bootperc_time<-mean(results[,13])
mean_boott_time<-mean(results[,14])
return(cbind(params,beta_est,bias,wald_coverage,boot_perc_coverage,boot_t_coverage, mean_wald_time,
mean_bootperc_time,mean_boott_time))
}
run_scenario<- function (params,nsim,B,nt,alpha=0.05){
results = matrix(NA,ncol=14,nrow=nsim)
set.seed(3333)
for(i in 1:nsim){
####################
# simulate data
simdata = get_simdata(n = params$n,
beta_treat = params$beta_true,
sigma2 = params$sigma2_true)
####################
# apply method(s)
fit = fit_model(simdata)
####################
# calculate estimates
tictoc::tic()
estimates = get_estimates(model_fit = fit,
true_beta = params$beta_true)
estimates = c(estimates,true_beta = params$beta_true, n = params$n,sigma2_true = params$sigma2_true)
time_stamp1 = tictoc::toc(quiet =TRUE)
wald_time=time_stamp1$toc - time_stamp1$tic
coef=estimates[1]
tictoc::tic()
boot_perc<-boot_nonpara_perc_residuals(sample=simdata,beta_est=coef,B=B,alpha=alpha)
time_stamp2 = tictoc::toc(quiet =TRUE)
boot_perc_time=time_stamp2$toc - time_stamp2$tic
estimates<- c(estimates,boot_perc)
tictoc::tic()
boot_t<-boot_nonpara_t_residuals(sample=simdata,beta_est=coef,B=B,nt=nt,alpha=alpha)
time_stamp3 = tictoc::toc(quiet =TRUE)
boot_t_time=time_stamp3$toc - time_stamp3$tic
estimates<- c(estimates,boot_t,wald_time,boot_perc_time,boot_t_time)
results[i,] = estimates
}
####################
beta_est<-mean(results[,1])
bias<- params$beta_true-beta_est
wald_coverage<-mean((params$beta_true >= results[,3] & params$beta_true <= results[,4]))
boot_perc_coverage<-mean((params$beta_true >= results[,8] & params$beta_true <= results[,9]))
boot_t_coverage<-mean((params$beta_true >= results[,10] & params$beta_true <= results[,11]))
mean_wald_time<-mean(results[,12])
mean_bootperc_time<-mean(results[,13])
mean_boott_time<-mean(results[,14])
return(cbind(params,beta_est,bias,wald_coverage,boot_perc_coverage,boot_t_coverage, mean_wald_time,
mean_bootperc_time,mean_boott_time))
}
summary_table = foreach(i =1:no_scenario, .combine = rbind) %dopar% {
params = param_grid[i,]
run_scenario(params,nsim=nsim,B=B,nt=nt,alpha=alpha)
}
B=1000
nt=1000
alpha=0.05
nsim=0.95*(1 - 0.95)/(0.01)^2
n = c(10, 50, 500)
beta_true = c(0, 0.5, 2)
sigma2_true = c(2, log(2))
param_grid = expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
sigma2_true = sigma2_true)
no_scenario=nrow(param_grid)
# Set up parallel backend with  cores
num_cores = detectCores() -2
cl = makeCluster(num_cores)
registerDoParallel(cl)
summary_table = foreach(i =1:no_scenario, .combine = rbind) %dopar% {
params = param_grid[i,]
run_scenario(params,nsim=nsim,B=B,nt=nt,alpha=alpha)
}
i
summary_table
summary_table = foreach(i =1:no_scenario, .combine = rbind) %dopar% {
params = param_grid[i,]
run_scenario(params,nsim=nsim,B=B,nt=nt,alpha=alpha)
}
library(tidyverse)
library(tictoc)
library(doParallel)
library(foreach)
source(here::here("source", "Functions.R"))
source(here::here("Simulations","run_scenario.R"))
B=10
nt=10
alpha=0.05
nsim=0.95*(1 - 0.95)/(0.01)^2
n = c(10, 50, 500)
beta_true = c(0, 0.5, 2)
sigma2_true = c(2, log(2))
param_grid = expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
sigma2_true = sigma2_true)
no_scenario=nrow(param_grid)
# Set up parallel backend with 10 cores
num_cores = detectCores() -2
cl = makeCluster(num_cores)
registerDoParallel(cl)
library(tidyverse)
library(tictoc)
library(doParallel)
library(foreach)
source(here::here("source", "Functions.R"))
source(here::here("Simulations","run_scenario.R"))
B=500
nt=500
alpha=0.05
nsim=0.95*(1 - 0.95)/(0.01)^2
n = c(10, 50, 500)
beta_true = c(0, 0.5, 2)
sigma2_true = c(2, log(2))
param_grid = expand.grid(n = n,
beta_true = beta_true,
sigma2_true = sigma2_true)
no_scenario=nrow(param_grid)
# Set up parallel backend with (8 cores in my personal mac, 6 cores in university lap )
num_cores = detectCores() -2
cl = makeCluster(num_cores)
registerDoParallel(cl)
summart_table<- load(file = here::here("results", "summary_table.RDA"))
summary_table<- load(file = here::here("results", "summary_table.RDA"))
i=1
filename = paste0("scenario_", paste(param_grid[i,],collapse = "_"), ".RDA")
filename = paste0("scenario_", paste(param_grid[i,],collapse = "_"), ".RDA")
load(file = here::here("results", filename))
View(results)
df=data.frame(y=results[,2])
ggplot(df, aes(x=y)) + geom_histogram(binwidth=.5)
ggplot(df, aes(x=y)) + geom_histogram()
param_grid[i,]
expression(~beta)
paste("Plot of SD when n= ", param_grid[i,1], expression(~beta=), param_grid[i,2], param_grid[i,3])
paste("Plot of SD when n= ", param_grid[i,1], expression(~beta), param_grid[i,2], param_grid[i,3])
ggplot(df, aes(x=y)) + geom_histogram()+ ggtitle(
paste("Plot of SD when n= ", param_grid[i,1], expression(~beta), param_grid[i,2], param_grid[i,3])) +
xlab("SD") + ylab("Counts")
ggplot(df, aes(x=y)) + geom_histogram()+ ggtitle(
paste("Plot of SD when n= ", param_grid[i,1], expression(beta), param_grid[i,2], param_grid[i,3])) +
xlab("SD") + ylab("Counts")
ggplot(df, aes(x=y)) + geom_histogram()+ ggtitle(
paste("Plot of SD when n= ", param_grid[i,1], bquote(beta), param_grid[i,2], param_grid[i,3])) +
xlab("SD") + ylab("Counts")
ggplot(df, aes(x=y)) + geom_histogram()+ ggtitle(
paste("Plot of SD when n= ", param_grid[i,1], bquote(beta), param_grid[i,2], param_grid[i,3])) +
xlab("SD") + ylab("Counts")
ggplot(df, aes(x=y)) + geom_histogram()+ ggtitle(
paste("Plot of SD when n= ", param_grid[i,1], bquote(beta), param_grid[i,2], param_grid[i,3])) +
xlab("SD") + ylab("Counts")
summary_table<- load(file = here::here("results", "summary_table.RDA"))
bquote(beta)
expression( paste( sigma^2," = ",,param_grid[i,3] )
expression( paste( sigma^2," = ",,param_grid[i,3]))
expression( paste( sigma^2," = ",param_grid[i,3]))
ggplot(df, aes(x=y)) + geom_histogram()+ ggtitle(
paste("Plot of SD when n= ", param_grid[i,1], "\U03B2 =", param_grid[i,2],
expression( paste( sigma^2," = ",param_grid[i,3]))))
ggplot(df, aes(x=y)) + geom_histogram()+ ggtitle(
expression("Plot of SD when n= ", param_grid[i,1], beta, param_grid[i,2],
sigma^2," = ",param_grid[i,3]))
ggplot(df, aes(x=y)) + geom_histogram()+ ggtitle(
expression(paste("Plot of SD when n= ", param_grid[i,1], beta, param_grid[i,2],
sigma^2," = ",param_grid[i,3])))
paste("Plot of SD when n= ", param_grid[i,1])
expression(paste("Plot of SD when n= ", param_grid[i,1]), beta, paste(param_grid[i,2]),
sigma^2,paste(" = ",param_grid[i,3]))
ggplot(df, aes(x=y)) + geom_histogram()+ ggtitle(
expression(paste("Plot of SD when n= ", param_grid[i,1]), beta, paste(param_grid[i,2]),
sigma^2,paste(" = ",param_grid[i,3])))
paste("Plot of SD when n= ", param_grid[i,1])
paste("=",param_grid[i,2])
paste(" = ",param_grid[i,3])
paste(paste("Plot of SD when n= ", param_grid[i,1]), beta, paste("=",param_grid[i,2]),
sigma,paste("=",param_grid[i,3]))
paste(paste("Plot of SD when n= ", param_grid[i,1]), beta, paste("=",param_grid[i,2]),
sigma,paste("=",param_grid[i,3]))
ggplot(df, aes(x=y)) + geom_histogram()+ggtitle(bquote(
"Plot of SD when n = " ~ .(param_grid[i,1]) ~ ", " ~ beta == .(param_grid[i,2]) ~ ", "
~ sigma^2 == .(param_grid[i,3])))
plots<-NULL
for (i in 1:no_scenario){
filename = paste0("scenario_", paste(param_grid[i,],collapse = "_"), ".RDA")
load(file = here::here("results", filename))
df=data.frame(y=results[,2])
plots[[i]]<-ggplot(df, aes(x=y)) + geom_histogram()+ggtitle(bquote(
"Plot of SD when n = " ~ .(param_grid[i,1]) ~ ", " ~ beta == .(param_grid[i,2]) ~ ", "
~ sigma^2 == .(param_grid[i,3]))) +
xlab("SD") + ylab("Counts")
}
sd_wald<-data.frame()
sd_wald<-data.frame()
for (i in 1:no_scenario){
filename = paste0("scenario_", paste(param_grid[i,],collapse = "_"), ".RDA")
load(file = here::here("results", filename))
sd_wald=cbind(y=results[,2])
colnames(sd_wald[,1])<-paste(param_grid[i,],collapse = "_")
}
colnames(sd_wald[,1])
sd_wald<-data.frame()
for (i in 1:no_scenario){
filename = paste0("scenario_", paste(param_grid[i,],collapse = "_"), ".RDA")
load(file = here::here("results", filename))
sd_wald=cbind(y=results[,2])
colnames(sd_wald)[i]<-paste(param_grid[i,],collapse = "_")
}
colnames(sd_wald)
colnames(sd_wald)[i]
i
i=1
filename = paste0("scenario_", paste(param_grid[i,],collapse = "_"), ".RDA")
load(file = here::here("results", filename))
sd_wald=cbind(y=results[,2])
colnames(sd_wald)[i]
colnames(sd_wald)[i]<-paste(param_grid[i,],collapse = "_")
i=1
i=2
filename = paste0("scenario_", paste(param_grid[i,],collapse = "_"), ".RDA")
load(file = here::here("results", filename))
sd_wald=cbind(y=results[,2])
colnames(sd_wald)
sd_wald<-data.frame()
for (i in 1:no_scenario){
filename = paste0("scenario_", paste(param_grid[i,],collapse = "_"), ".RDA")
load(file = here::here("results", filename))
sd_wald=cbind(sd_wald,y=results[,2])
colnames(sd_wald)[i]<-paste(param_grid[i,],collapse = "_")
}
i
cbind(sd_wald,y=results[,2])
sd_wald<-data.frame(,nrow=nsim)
sd_wald<-data.frame(matrix(nrow=nsim,ncol=n_scenario))
sd_wald<-data.frame(matrix(nrow=nsim,ncol=no_scenario))
for (i in 1:no_scenario){
filename = paste0("scenario_", paste(param_grid[i,],collapse = "_"), ".RDA")
load(file = here::here("results", filename))
sd_wald[,i]=y=results[,2]
colnames(sd_wald)[i]<-paste(param_grid[i,],collapse = "_")
}
View(sd_wald)
library(reshape2)
melt(sd_wald)
ggplot(melt(sd_wald), aes(x = value)) +
facet_wrap(~ variable, scales = "free", ncol = 2) +
geom_histogram(binwidth = .5)
param_grid
sd_wald<-data.frame(matrix(nrow=nsim,ncol=no_scenario))
for (i in 1:9){
filename = paste0("scenario_", paste(param_grid[i,],collapse = "_"), ".RDA")
load(file = here::here("results", filename))
sd_wald[,i]=y=results[,2]
colnames(sd_wald)[i]<-paste(param_grid[i,],collapse = "_")
}
ggplot(melt(sd_wald), aes(x = value)) +
facet_wrap(~ variable, scales = "free", ncol = 3)
sd_wald<-data.frame(matrix(nrow=nsim,ncol=no_scenario))
sd_wald<-data.frame(matrix(nrow=nsim,ncol=no_scenario))
for (i in 1:no_scenario){
filename = paste0("scenario_", paste(param_grid[i,],collapse = "_"), ".RDA")
load(file = here::here("results", filename))
sd_wald[,i]=y=results[,2]
colnames(sd_wald)[i]<-paste(param_grid[i,],collapse = "_")
}
ggplot(melt(sd_wald[,1:9]), aes(x = value)) +
facet_wrap(~ variable, scales = "free", ncol = 3)
melt(sd_wald[,1:9])
ggplot(melt(sd_wald[,1:9]), aes(x = value)) +
facet_wrap(~ variable, scales = "free", ncol = 3)
ggplot(melt(sd_wald[,1:9]), aes(x = value)) +
facet_wrap(~ variable, scales = "free", ncol = 3)
df_long <- sd_wald %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value")
View(df_long)
ggplot(df_long, aes(x = Value)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~ Variable, scales = "free")
bquote(
"Plot of SD when n = " ~ .(param_grid[i,1]) ~ ", " ~ beta == .(param_grid[i,2]) ~ ", "
~ sigma^2 == .(param_grid[i,3]))
# Plot histograms with facet_wrap
ggplot(df_long, aes(x = Value)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~ Variable, scales = "free",ncol=3) +
theme_minimal() +
labs(title = bquote(
"Plot of SD when n = " ~ .(param_grid[i,1]) ~ ", " ~ beta == .(param_grid[i,2]) ~ ", "
~ sigma^2 == .(param_grid[i,3])), x = "Standard deviation (SD)", y = "Frequency")
title = bquote(
"Plot of SD when n_, " ~ beta ~ "_ "
~ sigma^2 ~)
ggplot(df_long, aes(x = Value)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~ Variable, scales = "free",ncol=3) +
theme_minimal() +
labs(title = bquote("Plot of SD when n_, " ~ beta ~ "_ "
~ sigma^2), x = "Standard deviation (SD)", y = "Frequency")
ggplot(df_long, aes(x = Value)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~ Variable, scales = "free",ncol=3) +
theme_minimal() +
labs(title = bquote("Plot of SD when n_" ~ beta ~ "_ "
~ sigma^2), x = "Standard deviation (SD)", y = "Frequency")
sd_wald<-data.frame(matrix(nrow=nsim,ncol=no_scenario))
sd_boot<-data.frame(matrix(nrow=nsim,ncol=no_scenario))
for (i in 1:no_scenario){
filename = paste0("scenario_", paste(param_grid[i,],collapse = "_"), ".RDA")
load(file = here::here("results", filename))
sd_wald[,i]=y=results[,2]
colnames(sd_wald)[i]<-paste(param_grid[i,],collapse = "_")
sd_boot[,i]=y=results[,8]
colnames(sd_boot)[i]<-paste(param_grid[i,],collapse = "_")
}
df_long2 <- sd_wald %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value")
ggplot(df_long2, aes(x = Value)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~ Variable, scales = "free",ncol=3) +
theme_minimal() +
labs(title = bquote("Plot of SD when n_" ~ beta ~ "_ "
~ sigma^2), x = "Standard deviation (SD)", y = "Frequency")
